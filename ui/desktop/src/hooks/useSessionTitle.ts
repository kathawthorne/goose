import { useState, useCallback, useEffect } from 'react';
import { updateSession, getSessionHistory } from '../api/sdk.gen';

interface UseSessionTitleProps {
  sessionId: string;
  initialTitle: string;
  messages?: any[]; // Add messages prop to track when first message is added
}

interface UseSessionTitleReturn {
  title: string;
  updateTitle: (newTitle: string) => Promise<void>;
  isUpdating: boolean;
  isAutoGenerating: boolean; // Add new state for auto-generation
  error: string | null;
}

// Helper function to generate a title from the first message
const generateTitleFromMessage = (messageText: string): string => {
  if (!messageText || messageText.trim() === '') {
    return '';
  }

  // Clean up the message text
  const cleanText = messageText.trim();
  
  // If it's short enough, use it as is (up to 50 characters)
  if (cleanText.length <= 50) {
    return cleanText;
  }
  
  // For longer messages, try to find a good breaking point
  const words = cleanText.split(' ');
  let title = '';
  
  for (const word of words) {
    if ((title + ' ' + word).length > 50) {
      break;
    }
    title = title ? title + ' ' + word : word;
  }
  
  // If we couldn't fit any words, just truncate
  if (!title) {
    title = cleanText.substring(0, 47) + '...';
  } else if (title.length < cleanText.length) {
    title += '...';
  }
  
  return title;
};

export const useSessionTitle = ({ 
  sessionId, 
  initialTitle,
  messages = []
}: UseSessionTitleProps): UseSessionTitleReturn => {
  const [title, setTitle] = useState(initialTitle);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isAutoGenerating, setIsAutoGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasLoadedFromAPI, setHasLoadedFromAPI] = useState(false);
  const [hasAutoGeneratedTitle, setHasAutoGeneratedTitle] = useState(false);

  // Update title when initialTitle changes (e.g., when session metadata loads)
  // But only update if we get a non-empty title, and don't reset to empty
  useEffect(() => {
    if (initialTitle && initialTitle.trim() !== '') {
      setTitle(initialTitle);
      setHasLoadedFromAPI(true);
      setHasAutoGeneratedTitle(false); // Reset auto-generation flag if we get a real title
    } else if (initialTitle === '' && hasLoadedFromAPI) {
      // If we previously had a title but now it's empty, update to reflect that
      setTitle('');
      setHasAutoGeneratedTitle(false);
    }
  }, [initialTitle, hasLoadedFromAPI]);

  const updateTitle = useCallback(async (newTitle: string) => {
    setIsUpdating(true);
    setError(null);

    try {
      await updateSession({
        path: { session_id: sessionId },
        body: { description: newTitle }
      });
      setTitle(newTitle);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update session title';
      setError(errorMessage);
      throw err; // Re-throw so EditableTitle can handle it
    } finally {
      setIsUpdating(false);
    }
  }, [sessionId]);

  // Auto-generate title from first message when it's added
  useEffect(() => {
    // Only auto-generate if:
    // 1. We have exactly one message (the first user message)
    // 2. We don't already have a title
    // 3. We haven't already auto-generated a title
    // 4. The message is from a user
    if (
      messages.length === 1 && 
      !title && 
      !hasAutoGeneratedTitle &&
      messages[0]?.role === 'user'
    ) {
      // Extract text content from the message
      const messageContent = messages[0]?.content;
      let messageText = '';
      
      if (Array.isArray(messageContent)) {
        // Find text content in the message content array
        const textContent = messageContent.find(c => c.type === 'text');
        messageText = textContent?.text || '';
      } else if (typeof messageContent === 'string') {
        messageText = messageContent;
      }
      
      if (messageText.trim()) {
        const generatedTitle = generateTitleFromMessage(messageText);
        if (generatedTitle) {
          // Set auto-generating state
          setIsAutoGenerating(true);
          
          // Auto-update the session title
          updateTitle(generatedTitle).then(() => {
            setHasAutoGeneratedTitle(true);
          }).catch(err => {
            console.warn('Failed to auto-generate session title:', err);
          }).finally(() => {
            setIsAutoGenerating(false);
          });
        }
      }
    }
  }, [messages, title, hasAutoGeneratedTitle, updateTitle]);

  // If we don't have a title from metadata, try to fetch it directly from the API
  useEffect(() => {
    const fetchSessionTitle = async () => {
      if (!hasLoadedFromAPI && sessionId && (!initialTitle || initialTitle.trim() === '')) {
        try {
          const response = await getSessionHistory({ path: { session_id: sessionId } });
          if (response.data?.metadata?.description) {
            setTitle(response.data.metadata.description);
            setHasLoadedFromAPI(true);
          }
        } catch (err) {
          console.warn('Failed to fetch session title:', err);
          // Don't set error state for this, as it's just a fallback
        }
      }
    };

    fetchSessionTitle();
  }, [sessionId, initialTitle, hasLoadedFromAPI]);

  return {
    title,
    updateTitle,
    isUpdating,
    isAutoGenerating,
    error,
  };
};
